#!/bin/bash
#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_POSITIONAL_SINGLE([command],[Command to execute])
# ARG_TYPE_GROUP_SET([task],[OPERATION],[command],[root,issuing],[index])

# ARG_POSITIONAL_SINGLE([cn],[Certificate commonName])
# ARG_OPTIONAL_SINGLE([cn-id],[i],[Short ID appended to commonName],[YA1])
# ARG_OPTIONAL_SINGLE([domain-name],[d],[Two-segment-only domain name to be embedded in the certificates],[ideant.pl])
# ARG_OPTIONAL_SINGLE([org-name],[o],[Organization name to be embedded in the certificates],[Absolute Trust])
# ARG_OPTIONAL_SINGLE([org-unit-name],[u],[Organizational unit name to be embedded in the certificates],[Certificate Authority])

# ARG_HELP([Sets up 2-tier PKI. With (1) Root and (2) Issuing certificates.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


# # When called, the process ends.
# Args:
# 	$1: The exit message (print to stderr)
# 	$2: The exit code (default is 1)
# if env var _PRINT_HELP is set to 'yes', the usage is print to stderr (prior to $1)
# Example:
# 	test -f "$_arg_infile" || _PRINT_HELP=yes die "Can't continue, have to supply file as an argument, got '$_arg_infile'" 4
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}

# validators

task()
{
	local _allowed=("root" "issuing") _seeking="$1" _idx=0
	for element in "${_allowed[@]}"
	do
		test "$element" = "$_seeking" && { test "$3" = "idx" && echo "$_idx" || echo "$element"; } && return 0
		_idx=$((_idx + 1))
	done
	die "Value '$_seeking' (of argument '$2') doesn't match the list of allowed values: 'root' and 'issuing'" 4
}


# Function that evaluates whether a value passed to it begins by a character
# that is a short option of an argument the script knows about.
# This is required in order to support getopts-like short options grouping.
begins_with_short_option()
{
	local first_option all_short_options='idouh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
# The positional args array has to be reset before the parsing, because it may already be defined
# - for example if this script is sourced by an argbash-powered script.
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_cn_id="YA1"
_arg_domain_name="ideant.pl"
_arg_org_name="Absolute Trust"
_arg_org_unit_name="Certificate Authority"


# Function that prints general usage of the script.
# This is useful if users asks for it, or if there is an argument parsing error (unexpected / spurious arguments)
# and it makes sense to remind the user how the script is supposed to be called.
print_help()
{
	printf '%s\n' "Sets up 2-tier PKI. With (1) Root and (2) Issuing certificates."
	printf 'Usage: %s [-i|--cn-id <arg>] [-d|--domain-name <arg>] [-o|--org-name <arg>] [-u|--org-unit-name <arg>] [-h|--help] <command> <cn>\n' "$0"
	printf '\n\t%s\n' "<command>: Command to execute. Can be one of: 'root' and 'issuing'"
	printf '\t%s\n' "<cn>: Certificate commonName"
	printf '\n\t%s\n' "-i, --cn-id: Short ID appended to commonName (default: 'YA1')"
	printf '\t%s\n' "-d, --domain-name: Two-segment-only domain name to be embedded in the certificates (default: 'ideant.pl')"
	printf '\t%s\n' "-o, --org-name: Organization name to be embedded in the certificates (default: 'Absolute Trust')"
	printf '\t%s\n' "-u, --org-unit-name: Organizational unit name to be embedded in the certificates (default: 'Certificate Authority')"
	printf '\t%s\n\n' "-h, --help: Prints help"
}


# The parsing of the command-line
parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			# We support whitespace as a delimiter between option argument and its value.
			# Therefore, we expect the --cn-id or -i value.
			# so we watch for --cn-id and -i.
			# Since we know that we got the long or short option,
			# we just reach out for the next argument to get the value.
			-i|--cn-id)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_cn_id="$2"
				shift
				;;
			# We support the = as a delimiter between option argument and its value.
			# Therefore, we expect --cn-id=value, so we watch for --cn-id=*
			# For whatever we get, we strip '--cn-id=' using the ${var##--cn-id=} notation
			# to get the argument value
			--cn-id=*)
				_arg_cn_id="${_key##--cn-id=}"
				;;
			# We support getopts-style short arguments grouping,
			# so as -i accepts value, we allow it to be appended to it, so we watch for -i*
			# and we strip the leading -i from the argument string using the ${var##-i} notation.
			-i*)
				_arg_cn_id="${_key##-i}"
				;;
			# See the comment of option '--cn-id' to see what's going on here - principle is the same.
			-d|--domain-name)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_domain_name="$2"
				shift
				;;
			# See the comment of option '--cn-id=' to see what's going on here - principle is the same.
			--domain-name=*)
				_arg_domain_name="${_key##--domain-name=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			-d*)
				_arg_domain_name="${_key##-d}"
				;;
			# See the comment of option '--cn-id' to see what's going on here - principle is the same.
			-o|--org-name)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_org_name="$2"
				shift
				;;
			# See the comment of option '--cn-id=' to see what's going on here - principle is the same.
			--org-name=*)
				_arg_org_name="${_key##--org-name=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			-o*)
				_arg_org_name="${_key##-o}"
				;;
			# See the comment of option '--cn-id' to see what's going on here - principle is the same.
			-u|--org-unit-name)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_org_unit_name="$2"
				shift
				;;
			# See the comment of option '--cn-id=' to see what's going on here - principle is the same.
			--org-unit-name=*)
				_arg_org_unit_name="${_key##--org-unit-name=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			-u*)
				_arg_org_unit_name="${_key##-u}"
				;;
			# The help argurment doesn't accept a value,
			# we expect the --help or -h, so we watch for them.
			-h|--help)
				print_help
				exit 0
				;;
			# We support getopts-style short arguments clustering,
			# so as -h doesn't accept value, other short options may be appended to it, so we watch for -h*.
			# After stripping the leading -h from the argument, we have to make sure
			# that the first character that follows coresponds to a short option.
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


# Check that we receive expected amount positional arguments.
# Return 0 if everything is OK, 1 if we have too little arguments
# and 2 if we have too much arguments
handle_passed_args_count()
{
	local _required_args_string="'command' and 'cn'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


# Take arguments that we have received, and save them in variables of given names.
# The 'eval' command is needed as the name of target variable is saved into another variable.
assign_positional_args()
{
	local _positional_name _shift_for=$1
	# We have an array of variables to which we want to save positional args values.
	# This array is able to hold array elements as targets.
	# As variables don't contain spaces, they may be held in space-separated string.
	_positional_names="_arg_command _arg_cn "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

# Now call all the functions defined above that are needed to get the job done
parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash
# Validation of values
_arg_command="$(task "$_arg_command" "command")" || exit 1
_arg_command_index="$(task "$_arg_command" "command" idx)"

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


echo "Value of --option: $_arg_option"
echo "print is $_arg_print"
echo "Value of positional-arg: $_arg_positional_arg"

# ] <-- needed because of Argbash